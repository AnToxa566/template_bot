#main.py

import telebot
import io

from telebot import types

START = 'Start'

CREATE_TEMPLATE = '–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω'
SET_CHANNEL = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª'

SPOT = '–°–ø–æ—Ç'
FEAT = '–§—å—é—á–µ—Ä—Å—ã'

HUOBI = 'Huobi'
BINANCE = 'Binance'

LIMIT = 'Limit'
MARKET = 'Market'

SHORT = 'Short'
LONG = 'Long'

WITH_SHITOC = '#crypto_signal_shitok'
WITHOUT_SHITOC = '#crypto_signal'

BACK = '–ù–∞–∑–∞–¥'
EXIT = '–í—ã–π—Ç–∏'

API_TOKEN = '5745924229:AAGgkSg5QUZstkQFJ7xkDCEOUwnBWJuzQ-0'
bot = telebot.TeleBot(API_TOKEN)

last_command = START

token = ''
exchange = ''
order_type =''
open_price = ''
average_price = ''

goalNum = 1
goals = []

link = ''
hashtag = ''

symbol_01 = ''
symbol_03 = ''
position_type = ''
stoploss = ''
buy_sell = ''
buy_sell_reverse = ''

def check_command(text, message):
    global last_command, exchange, order_type, hashtag, position_type, buy_sell, buy_sell_reverse, symbol_01, symbol_03
    
    if text == START:
        last_command = 'None'
        process_command(CREATE_TEMPLATE, SET_CHANNEL, from_message = message, send_message = '–ñ–¥—É –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ üëá')
        
    elif text == CREATE_TEMPLATE:
        last_command = START
        process_command(SPOT, FEAT, from_message = message, send_message = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏ üëá')
        
    elif text == SET_CHANNEL:
        last_command = START
        set_channel(message)
    
    elif text == SPOT:
        last_command = CREATE_TEMPLATE
        process_command(BINANCE, HUOBI, from_message = message, send_message = '–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É üëá', is_back = True)  
        
    elif text == FEAT:
        last_command = CREATE_TEMPLATE
        process_command(SHORT, LONG, from_message = message, send_message = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é üëá', is_back = True)
        
    elif text == HUOBI or text == BINANCE:
        last_command = SPOT
        exchange = text
        
        if text == BINANCE:
            hashtag = WITHOUT_SHITOC
        else:
            hashtag = WITH_SHITOC
        
        process_command(LIMIT, MARKET, from_message = message, send_message = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ üëá', is_back = True)
        
    elif text == LIMIT or text == MARKET:        
        order_type = text
        set_users_values(message)
        
    elif text == SHORT:
        last_command = FEAT
              
        symbol_01 = 'üîª'
        symbol_03 = 'üîΩ'
        position_type = 'SHORT'
        buy_sell = '–ü—Ä–æ–¥–∞–µ–º'
        buy_sell_reverse = '–ü–æ–∫—É–ø–∞–µ–º'
        
        set_users_values(message)
        
    elif text == LONG:
        last_command = FEAT
        
        symbol_01 = 'üöÄ'
        symbol_03 = 'üîº'
        position_type = 'LONG'
        buy_sell = '–ü–æ–∫—É–ø–∞–µ–º'
        buy_sell_reverse = '–ü—Ä–æ–¥–∞–µ–º'
        
        set_users_values(message)
        
    elif text == BACK:
        check_command(last_command, message)
        
    elif text == EXIT:
        check_command(START, message)


def set_channel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    markup.add(EXIT)
    
    sent = bot.send_message(message.chat.id, """–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    
    1. –î–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª –±–æ—Ç–∞ @myidbot —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–Ω –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id –í–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.
    2. –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞ (@your_template_bot) –≤ —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª, —Ç–∞–∫ –∂–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã —É –Ω–µ–≥–æ –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –í–∞—à –∫–∞–Ω–∞–ª.
    3. –î–∞–ª–µ–µ, –Ω–∞ –í–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –í–∞–º —Å–ª–µ–¥—É–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /getgroupid. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å id –í–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π id –∏ –º–æ–∂–µ—Ç–µ —Å–º–µ–ª–æ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    4. –ò, –Ω–∞–∫–æ–Ω–µ—Ü, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–π id –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç""", reply_markup = markup)
    
    bot.register_next_step_handler(sent, set_channel_id)
    
    
def set_channel_id(message):
    if message.text != EXIT:
        user_id = str(message.from_user.id)
        
        with open("channel_id.txt", mode="r", encoding="utf-8") as file:
            file_data = file.read()
            file.seek(0, 0)
            lines = file.readlines()      
        
        if user_id in file_data:
            with open("channel_id.txt", mode="w", encoding="utf-8") as file:
                for line in lines:
                    if user_id not in line:
                        file.write(line)
                    else:
                        file.write(user_id + ' ' + message.text + '\n')
        else:
            with open("channel_id.txt", mode="a", encoding="utf-8") as file:
                file.write(user_id + ' ' + message.text + '\n')
        
        bot.send_message(message.chat.id, 'The channel has been added üî•')
    
    check_command(START, message)
    

def set_users_values(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    markup.add(EXIT)
    
    sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ç —Ç–æ–∫–µ–Ω–∞', reply_markup = markup)
    bot.register_next_step_handler(sent, set_token)


def set_token(message):
    global token
     
    if message.text != EXIT:
        token = message.text
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è')
        bot.register_next_step_handler(sent, set_open_price)
    else:
        check_command(START, message)
    
def set_open_price(message):
    global open_price
    
    if message.text != EXIT:
        open_price = message.text
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è')
        bot.register_next_step_handler(sent, set_average_price)
    else:
        check_command(START, message)
    
    
def set_average_price(message):
    global average_price, goals, goalNum
    
    if message.text != EXIT:
        average_price = message.text
        
        goals = []
        goalNum = 1
        
        sent = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ {}-—é —Ü–µ–ª—å".format(goalNum))
        bot.register_next_step_handler(sent, set_goal)
    else:
        check_command(START, message)
    
    
def set_goal(message):
    global goals, goalNum
    
    if message.text != EXIT:
        goals.append(message.text)
        goalNum = goalNum + 1
        
        if goalNum <= 5:
            sent = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ {}-—é —Ü–µ–ª—å".format(goalNum))
            bot.register_next_step_handler(sent, set_goal)
        elif last_command != FEAT:
            sent = bot.send_message(message.chat.id, '–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Trading View')
            bot.register_next_step_handler(sent, set_link)
        else:
            sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø–ª–æ—Å—Å')
            bot.register_next_step_handler(sent, set_stoploss)
    else:
        check_command(START, message)


def set_stoploss(message):
    global stoploss
    
    if message.text != EXIT:
        stoploss = message.text
        sent = bot.send_message(message.chat.id, '–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Trading View')
        bot.register_next_step_handler(sent, set_link)
    else:
        check_command(START, message)


def set_link(message):    
    global link
    
    if message.text != EXIT:
        link = message.text
        user_id = str(message.from_user.id)
        to_id = message.chat.id
        
        with open("channel_id.txt", mode="r", encoding="utf-8") as file:
            file_data = file.read()
            
            if user_id in file_data:
                file.seek(0, 0)
                lines = file.readlines()
                             
                for line in lines:
                    if user_id in line:
                        to_id = (line.split())[1]
                        break
        
        for i in 1, 2, 3:
            if last_command != FEAT: 
                spots = get_spots("spot_0{}.txt".format(i))
            else:
                spots = get_spots("feat_0{}.txt".format(i))
            
            bot.send_message(to_id, spots)
    
    bot.send_message(message.chat.id, 'Ready üî•')
    check_command(START, message)


def process_command(*buttons, from_message, send_message, is_back = False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        
    markup.add(*buttons)
    
    if is_back:
        markup.add(BACK)
        markup.add(EXIT)
    
    bot.send_message(from_message.chat.id, send_message, reply_markup = markup)


def get_spots(file_name):    
    file = io.open(file_name, mode="r", encoding="utf-8")
    filedata = file.read()
    file.close()
        
    return replace_filedata(filedata)


def replace_filedata(filedata):
    global token, exchange, order_type, open_price, average_price, goals, link, hashtag, symbol_01, symbol_03, position_type, buy_sell, buy_sell_reverse, stoploss
    
    filedata = filedata.replace('{token}', token)
    filedata = filedata.replace('{exchange}', exchange)
    filedata = filedata.replace('{order_type}', order_type)
    filedata = filedata.replace('{open_price}', open_price)
    filedata = filedata.replace('{average_price}', average_price)
    
    filedata = filedata.replace('{goal_01}', goals[0])
    filedata = filedata.replace('{goal_02}', goals[1])
    filedata = filedata.replace('{goal_03}', goals[2])
    filedata = filedata.replace('{goal_04}', goals[3])
    filedata = filedata.replace('{goal_05}', goals[4])
    
    filedata = filedata.replace('{link}', link)
    filedata = filedata.replace('{#}', hashtag)
    
    filedata = filedata.replace('{symbol_01}', symbol_01)
    filedata = filedata.replace('{symbol_03}', symbol_03)
    filedata = filedata.replace('{position_type}', position_type)
    filedata = filedata.replace('{buy_sell}', buy_sell)
    filedata = filedata.replace('{buy_sell_reverse}', buy_sell_reverse)
    filedata = filedata.replace('{stoploss}', stoploss)    
    
    return filedata


@bot.message_handler(commands = ['start'])
def start_message(message):
    check_command(START, message)


@bot.message_handler(content_types='text')
def message_reply(message):
    check_command(message.text, message)


bot.infinity_polling(timeout=10, long_polling_timeout = 5)